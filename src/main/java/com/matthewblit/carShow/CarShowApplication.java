package com.matthewblit.carShow;

import com.matthewblit.carShow.entity.Car;
import com.matthewblit.carShow.entity.Owner;
import com.matthewblit.carShow.repository.CarRepository;
import com.matthewblit.carShow.repository.OwnerRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

/**/
@SpringBootApplication
public class CarShowApplication implements CommandLineRunner {
	@Autowired
	private CarRepository carRepository;

	@Autowired
	private OwnerRepository ownerRepository;
	private static final Logger logger = LoggerFactory.getLogger(CarShowApplication.class);
	public static void main(String[] args) {
		SpringApplication.run(CarShowApplication.class, args);
		logger.info("Application Started");
		logger.error("An Error Example");
		logger.trace("A Trace Example");
		logger.warn("A warning!!!!!");
	}

	@Override
	public void run(String... args) throws Exception {
		carRepository.saveAll(Arrays.asList(
				new Car("Ford", "F150", "sdhjvboaeruvb324234ff28i2"),
				new Car("Nissian", "Centra", "dbvob2or487g2rg4b8rv2"),
				new Car("Scion", "TC", "ubv2038rbv20hb38v45")
		));
		//The findAll method from JPA will retrieve everything from the selected table and store it into a list
		List<Car> carList = carRepository.findAll();
		// Using the Stream API method forEach of it and loop it through the logger.info
		carList.forEach(x -> logger.info(x.toString()));
		// Here we are creating two owners storing one in an Owner variable as the save will return the owner including
		// the id generated by the Database.
		Owner ownerOptional = ownerRepository.save(new Owner("Johnny Bravo", LocalDate.parse("1992-08-21")));
		ownerRepository.save(new Owner("Tess Burger", LocalDate.parse("1989-07-26")));
		//Here we create a new car plugging in the owner into the constructor linking the Owner to the Car
		Car car = new Car("Honda", "Civic","436543745745y24rtg354g3", ownerOptional);
		// Saving the singular car to the DB
		carRepository.save(car);
		// Using the Stream API method forEach of it and loop it through the logger.info also showing the Owner
		carRepository.findAll().forEach(x -> logger.info(x.toString()));

	}
}
